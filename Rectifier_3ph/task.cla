/*
 * task.cla
 *
 *  Created on: 06-07-2020
 *      Author: Matias_L
 */
//
// Included Files
//
#include "task_file.h"
#include <stdint.h>
#include <CLAmath.h>
//
//Task 1
__interrupt void Cla1Task1 (void)
{
    __mdebugstop();
//------------Lectura-de-variables-----------//
    float vdc, vg_a, vg_b, vg_c, ig_a, ig_b, ig_c;

    vdc  = (float)(AdcaResultRegs.ADCRESULT0);
    vg_a = (float)(AdcaResultRegs.ADCRESULT1);
    vg_b = (float)(AdcaResultRegs.ADCRESULT2);
    vg_c = (float)(AdcaResultRegs.ADCRESULT3);
    ig_a = (float)(AdcaResultRegs.ADCRESULT4);
    ig_b = (float)(AdcbResultRegs.ADCRESULT6);
    ig_c = (float)(AdcbResultRegs.ADCRESULT7);
//-------------------------------------------//
    adc_read[0] = vg_a;
    adc_read[1] = vg_b;
    adc_read[2] = vg_c;
    adc_read[3] = ig_a;
    adc_read[4] = ig_b;
    adc_read[5] = ig_c;
    adc_read[6] = vdc;
}

__interrupt void Cla1Task2 (void)
{
    __mdebugstop();
//------------Lectura-de-variables-----------//
    float vg_a, vg_b, vg_c;

    vg_a = (float)(AdcaResultRegs.ADCRESULT1);
    vg_b = (float)(AdcaResultRegs.ADCRESULT2);
    vg_c = (float)(AdcaResultRegs.ADCRESULT3);
//-------------------------------------------//
//----------transf_abc-a-alfa-beta-----------//
    float vg_alfa, vg_beta;

    vg_alfa = (2./3)*vg_a - (1./3)*vg_b - (1./3)*vg_c;
    vg_beta = vg_b/raiz_de_3 - vg_c/raiz_de_3;
//-------------------------------------------//
//-----------transf_alfa-beta-a-dq-----------//
    float vg_q, cos_theta, sin_theta;

    cos_theta = CLAcos(theta_l);
    sin_theta = CLAsin(theta_l);
    vg_q    = -sin_theta*vg_alfa + cos_theta*vg_beta;
//-------------------------------------------//
//-------------Sincronización_PLL------------//
    float actuac, prueba;

    actuac = integrador_l*ki_pll + vg_q*kp_pll + 2*pi*f;
    integrador_g = h_sample*vg_q+ integrador_ant_l;     //integrador
    prueba = h_sample*actuac + theta_ant_l;

        if (prueba >= lim_up_pll)
            prueba = prueba - lim_up_pll;//% theta_g - lim_upp_pll;  %// reinicia el valor de la triangular cuando alcanza 2pi

    theta_g = prueba;
//-------------------------------------------//
//----------actualizacion-variables----------//
    theta_ant_g      = theta_g;
    integrador_ant_g = integrador_g;
//-------------------------------------------//
}

__interrupt void Cla1Task3 (void)
{

}

__interrupt void Cla1Task4 (void)
{

}

__interrupt void Cla1Task5 (void)
{

}

__interrupt void Cla1Task6 (void)
{

}

__interrupt void Cla1Task7 (void)
{
    __mdebugstop();
//------------Lectura-de-variables-----------//
    float vdc, vg_a, vg_b, vg_c, ig_a, ig_b, ig_c;

    vdc  = (float)(AdcaResultRegs.ADCRESULT0);
    vg_a = (float)(AdcaResultRegs.ADCRESULT1);
    vg_b = (float)(AdcaResultRegs.ADCRESULT2);
    vg_c = (float)(AdcaResultRegs.ADCRESULT3);
    ig_a = (float)(AdcaResultRegs.ADCRESULT4);
    ig_b = (float)(AdcbResultRegs.ADCRESULT6);
    ig_c = (float)(AdcbResultRegs.ADCRESULT7);
//-------------------------------------------//
//----------transf_abc-a-alfa-beta-----------//
    float vg_alfa, vg_beta, ig_alfa, ig_beta;

    vg_alfa = (2./3)*vg_a - (1./3)*vg_b - (1./3)*vg_c;
    vg_beta = vg_b/raiz_de_3 - vg_c/raiz_de_3;
    ig_alfa = (2./3)*ig_a - (1./3)*ig_b - (1./3)*ig_c;
    ig_beta = ig_b/raiz_de_3 - ig_c/raiz_de_3;
//-------------------------------------------//
//-----------transf_alfa-beta-a-dq-----------//
    float vg_d, vg_q, ig_d, ig_q, cos_theta, sin_theta;

    cos_theta = CLAcos(theta_l);
    sin_theta = CLAsin(theta_l);
    vg_d    =  cos_theta*vg_alfa + sin_theta*vg_beta;
    vg_q    = -sin_theta*vg_alfa + cos_theta*vg_beta;
    ig_d    =  cos_theta*ig_alfa + sin_theta*ig_beta;
    ig_q    = -sin_theta*ig_alfa + cos_theta*ig_beta;
//-------------------------------------------//
//-------------Sincronización_PLL------------//
    float actuac, prueba;

    actuac = integrador_l*ki_pll + vg_q*kp_pll + 2*pi*f;
    integrador_g = h_sample*vg_q+ integrador_ant_l;  //   integrador
    prueba = h_sample*actuac + theta_ant_l;

        if (prueba >= lim_up_pll)
        {
            prueba = prueba - lim_up_pll;            //% theta_g - lim_upp_pll;  %// reinicia el valor de la triangular cuando alcanza 2pi
        }
    theta_g = prueba;
//-------------------------------------------//
//----------Controlador-de-voltaje-----------//
    float err_v, u_v, id_ref;

    err_v   = vdc_ref*vdc_ref - vdc*vdc;
    u_v     = KNO_v*(err_v - x_v_l);
    if (u_v > MAX_ACT_v)
        {
        u_v = MAX_ACT_v;
        }
    else if (u_v < MIN_ACT_v)
        {
    u_v = MIN_ACT_v;
        }
    x_v_g     = PIAWU_N1_v*u_v + PIAWU_D1_v*x_ant_v_l;
    id_ref = u_v - kpv1*vdc*vdc;
//-------------------------------------------//
//---------Controlador-de-corriente-d--------//
    float err_i_d, u_id, v_conv_d;

    err_i_d = id_ref - ig_d;
    u_id = KN0_i*(err_i_d - x_id_l);
    if (u_id > MAX_ACT_i)
        {
         u_id = MAX_ACT_i;
        }
    else if (u_id < MIN_ACT_i)
         {
          u_id = MIN_ACT_i;
         }
    x_id_g     = PIAWU_N1_i*u_id + PIAWU_D1_i*x_ant_id_l;
    v_conv_d = vg_d + ig_q*2*pi*f*L - u_id;
//-------------------------------------------//
//---------Controlador-de-corriente-q--------//
    float err_i_q, u_iq, v_conv_q;

    err_i_q  = iq_ref - ig_q;
    u_iq     = KN0_i*(err_i_q - x_iq_l);
    if (u_iq > MAX_ACT_i)
        {
            u_iq = MAX_ACT_i;
        }
     else if (u_iq < MIN_ACT_i)
         {
             u_iq = MIN_ACT_i;
         }
    x_iq_g     = PIAWU_N1_i*u_iq + PIAWU_D1_i*x_ant_iq_l;
    v_conv_q = vg_q - ig_d*2*pi*f*L - u_iq;
//-------------------------------------------//
//----------actualizacion-variables----------//
    theta_ant_g      = theta_g;         //pll
    integrador_ant_g = integrador_g;    //pll

    x_ant_v_g = x_v_g;                  //controlador de voltaje

    x_ant_id_g = x_id_g;                //controlador i_d

    x_ant_iq_g = x_iq_g;                //controlador i_q
//-------------------------------------------//
//--------------dq-a-alpha_beta--------------//
    float v_conv_alfa, v_conv_beta;

    v_conv_alfa = cos_theta*v_conv_d - sin_theta*v_conv_q;
    v_conv_beta = sin_theta*v_conv_d + cos_theta*v_conv_q;
//-------------------------------------------//
//--------------alpha_beta-a-abc-------------//
    v_conv_a = 2*v_conv_alfa/vdc;
    v_conv_b = 2*(-(1./2)*v_conv_alfa + (raiz_de_3/2)*v_conv_beta)/vdc;
    v_conv_c = 2*(-(1./2)*v_conv_alfa - (raiz_de_3/2)*v_conv_beta)/vdc;
//-------------------------------------------//
}

__interrupt void Cla1Task8 (void)
{

}
//
// End of file
//

